@Library('singularity_template@main') _

properties([
    parameters([
        booleanParam(name: 'forceRebuild', defaultValue: false, description: 'Force rebuild of the Singularity image'),
        string(name: 'buildTime', defaultValue: '00:30:00', description: 'Build job time limit'),
        string(name: 'buildCPUs', defaultValue: '8', description: 'CPUs to allocate for build'),
        string(name: 'buildMem', defaultValue: '10G', description: 'Memory to allocate for build'),
        string(name: 'runTime', defaultValue: '06:00:00', description: 'Run job time limit'),
        string(name: 'runCPUs', defaultValue: '4', description: 'CPUs to allocate for run'),
        string(name: 'runMem', defaultValue: '14G', description: 'Memory to allocate for run'),
        string(name: 'binds', defaultValue: '/home/wlp9800/.awsvault:/root/.awsvault,/home/wlp9800/.gnupg,/home/wlp9800/dev/asteroids:/home/wlp9800/asteroids', description: 'Bind paths for Singularity'),
        booleanParam(name: 'useGpu', defaultValue: false, description: 'Use GPU in the Singularity container'),
        booleanParam(name: 'exclusive', defaultValue: true, description: 'Run with exclusive node access')
    ])
])

def defaults = [
    sshUser: 'wlp9800',
    image: 'haskell-devenv',
    scratchDir: '/scratch/wlp9800',
    logDir: '/vast/wlp9800/logs',
    dockerUrl: 'docker://thewillyp/haskell-devenv',
    overlaySrc: '/scratch/wlp9800/haskell-devenv.ext3',
    entrypointUrl: 'https://raw.githubusercontent.com/thewillyP/haskell-devenv/master/entrypoint.sh',
    forceRebuild: params.forceRebuild,
    buildTime: params.buildTime,
    buildCPUs: params.buildCPUs,
    buildMem: params.buildMem,
    runTime: params.runTime,
    runCPUs: params.runCPUs,
    runMem: params.runMem,
    binds: params.binds,
    useGpu: params.useGpu,
    exclusive: params.exclusive
]

pipeline {
    agent any

    stages {
        stage('Init Environment') {
            steps {
                script {
                    env.EXEC_HOST = sh(script: "hostname", returnStdout: true).trim()
                    echo "Executor Host: ${env.EXEC_HOST}"
                }
            }
        }

        stage('Checkout Scripts') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/thewillyP/jenkins.git']]
                ])
            }
        }

        stage('Run Singularity Pipeline') {
            steps {
                script {
                    def runJobId = singularityPipeline(defaults)
                    echo "Singularity run job id: ${runJobId}"
                    env.RUN_JOB_ID = runJobId
                }
            }
        }

        stage('Submit DNS Update Job') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${defaults.sshUser}@${env.EXEC_HOST} '
                                export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}";
                                export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}";
                                bash -s "${env.RUN_JOB_ID}" "${defaults.image}" "${defaults.logDir}" "dns-update-${defaults.image}" "256M" "00:05:00" "1" "${defaults.sshUser}"
                            ' < submit_dns_job.sh
                        """
                    }
                }
            }
        }
    }
}